import Data.Set (fromList, toList, Set)
import Data.List

-- represent an (ordered) list as a collection of sets which is order-preserving
toOset :: Ord(a) => [a] -> Set (Set a)
toOset xs = fromList [fromList (take n xs)|n <- [1..(length xs)]]

-- take a collection of sets generated by toOset and reconstruct the original list
-- except for removal of any duplicates.
fromOset :: Ord(a) => Set (Set a) -> [a]
fromOset ss = let ls = toList ss
                  ll = sortBy (\x y -> compare (length x) (length y)) . map toList $ ls
                  fromOset' ([], ys) = ([], ys)
                  fromOset' (x:xxs, ys) = let y = head $ x \\ ys in fromOset'(xxs, y:ys)
                  (_, ys) = fromOset' (ll, [])
                  in reverse ys

-- pretty-print a collecion of Sets of Chars
pretty :: Set (Set Char) -> String
pretty ss = let inner s = "{" ++ (intersperse ',' (toList s)) ++ "}"
            in "{" ++ (intercalate "," (map inner (toList ss))) ++ "}"
